// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  DIET
  PROTEIN
  ROYAL
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum UserType {
  ADMIN
  USER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAUSED
}

enum ContactType {
  GENERAL
  FEEDBACK
  SUPPORT
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String?
  image         String?
  emailVerified DateTime?
  Testimonials  Testimonial[]
  role          UserType      @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subscriptions Subscription[]
  accounts Account[]
  sessions Session[]
}

model Contact {
  id          String      @id @default(cuid())
  companyName String
  email       String
  type        ContactType @default(GENERAL)
  message     String
  createdAt   DateTime    @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  id_token          String?
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Testimonial {
  id        String   @id @default(cuid())
  userId    String
  message   String
  rating    Int
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Subscription {
  id           String    @id @default(cuid())
  userId       String?
  User         User?      @relation(fields: [userId], references: [id])
  name         String
  PhoneNumber  String
  planType     PlanType
  mealType     MealType
  deliveryDays String[]
  status       SubscriptionStatus @default(ACTIVE)
  pausedFrom   DateTime? @default(now())
  pausedUntil  DateTime?
  price        Float?    @default(0)
  startDate    DateTime  @default(now())
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  endDate      DateTime?
  cancelledAt  DateTime?
  reactivatedAt DateTime?
}
